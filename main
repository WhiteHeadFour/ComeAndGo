using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;

namespace ServiceTrial
{
    public partial class Service1 : ServiceBase
    {
        public Service1()
        {
            this.CanHandleSessionChangeEvent = true;
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            using (System.IO.StreamWriter file = new System.IO.StreamWriter($@"{Environment.GetFolderPath(Environment.SpecialFolder.Desktop)}\daily.log", true))
            {
                file.WriteLine(Service1.TimeStamp()[0] + "," + DailyLogVerarbeitung.TimeToMinute() + "," + "true");
            }
        }

        protected override void OnStop()
        {
            using (System.IO.StreamWriter file = new System.IO.StreamWriter($@"{Environment.GetFolderPath(Environment.SpecialFolder.Desktop)}\daily.log", true))
            {
                file.WriteLine(Service1.TimeStamp()[0] + "," + DailyLogVerarbeitung.TimeToMinute() + "," + "false");
            }
        }

        protected override void OnShutdown()
        {
            using (System.IO.StreamWriter file = new System.IO.StreamWriter($@"{Environment.GetFolderPath(Environment.SpecialFolder.Desktop)}\daily.log", true))
            {
                file.WriteLine(Service1.TimeStamp()[0] + "," + DailyLogVerarbeitung.TimeToMinute() + "," + "false");
            }
        }

        protected override void OnSessionChange(SessionChangeDescription changeDescription)
        {
            System.Console.WriteLine($"{changeDescription.Reason}");
            if (changeDescription.Reason == SessionChangeReason.SessionLock)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter($@"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}\daily.log", true))
                {
                    file.WriteLine(Service1.TimeStamp()[0] + "," + DailyLogVerarbeitung.TimeToMinute() + "," + "false");
                }
            }
            else if (changeDescription.Reason == SessionChangeReason.SessionUnlock)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter($@"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}\daily.log", true))
                {
                    file.WriteLine(Service1.TimeStamp()[0] + "," + DailyLogVerarbeitung.TimeToMinute() + "," + "true");
                }
            }
        }

        public static string[] TimeStamp()
        {
            string[] LogTime = { DateTime.Now.ToShortDateString(), DateTime.Now.ToLongTimeString() };
            return LogTime;
        }

    }

    public class DailyLogVerarbeitung
    {
        public static bool CheckNeuertag(string aktuellerTag)
        {
            System.Threading.Thread.Sleep(100);
            return true;
        }

        public static void DailyInDataSchreiben(string firtLogin, string lastLogin, string saldo)
        {
            System.Threading.Thread.Sleep(100);
        }

        public static void Leeren()
        {
            System.Threading.Thread.Sleep(100);
        }

        public static void SchreibenInData()
        {
            System.Threading.Thread.Sleep(100);
        }

        public static string TimeToMinute()
        {
            string[] TimeShort = DateTime.Now.ToShortTimeString().Split(':');
            int HoursInMinutes = Int32.Parse(TimeShort[0]) * 60 + Int32.Parse(TimeShort[1]);
            return HoursInMinutes.ToString();
        }

        public static string FindFirstLogin()
        {
            System.Threading.Thread.Sleep(100);
            return "null";
        }

        public static string FindLastLogin()
        {
            System.Threading.Thread.Sleep(100);
            return "null";
        }
    }
}
